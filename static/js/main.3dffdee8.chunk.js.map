{"version":3,"sources":["components/checkbox.js","components/checkboxlist.js","App.js","serviceWorker.js","index.js"],"names":["noop","Checkbox","label","isSelected","onCheckboxChange","dataTestId","className","type","name","checked","onChange","onClick","data-testid","CheckBoxList","props","React","useState","setChecked","toggle","event","target","currentIndex","indexOf","newChecked","push","splice","onToggle","toggleAll","source","createCheckbox","option","key","createCheckboxes","map","children","Usage","args","console","log","selectAll","setSelectAll","data","onSelectAllToggle","toggleAllFn","isChecked","length","aria-label","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAEMA,EAAO,aAEE,SAASC,EAAT,GAKX,IAJFC,EAIC,EAJDA,MACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,iBAEC,IADDC,kBACC,MADY,eACZ,EACD,OACE,yBAAKC,UAAU,IACb,+BACE,2BACEC,KAAK,WACLC,KAAMN,EACNO,QAASN,EACTO,SAAUN,EACVO,QAASX,EACTM,UAAU,eACVM,cAAaP,IAEdH,ICnBT,SAASW,EAAaC,GAAO,MAEGC,IAAMC,SAAS,IAFlB,mBAEpBP,EAFoB,KAEXQ,EAFW,KAIrBC,EAAS,SAAAC,GAAU,IACfX,EAASW,EAAMC,OAAfZ,KACFa,EAAeZ,EAAQa,QAAQd,GAC/Be,EAAU,YAAOd,IACD,IAAlBY,EACFE,EAAWC,KAAKhB,GAEhBe,EAAWE,OAAOJ,EAAc,GAElCJ,EAAWM,GACXT,EAAMY,SAASH,IAIXI,EAAY,SAAAxB,GAChB,IAAMoB,EAAapB,EAAU,YAAOW,EAAMc,QAAU,GAEpDX,EAAWM,IAGPM,EAAiB,SAAAC,GAAM,OAC3B,kBAAC7B,EAAD,CACEC,MAAO4B,EACP3B,YAAyC,IAA7BM,EAAQa,QAAQQ,GAC5B1B,iBAAkBc,EAClBa,IAAKD,KAIHE,EAAmB,kBAAMlB,EAAMc,OAAOK,IAAIJ,IAWhD,OAAOf,EAAMoB,SAPJ,CACLzB,UACAkB,YACAK,qBAON,SAASG,EAAT,GAA8E,IAAD,IAA5DT,gBAA4D,MAAjD,wCAAIU,EAAJ,yBAAIA,EAAJ,uBAAa,EAAAC,SAAQC,IAAR,SAAY,YAAZ,OAA2BF,KAAS,IACzCrB,IAAMC,UAAS,GAD0B,mBACpEuB,EADoE,KACzDC,EADyD,KAErEC,EAAO,CAAC,aAAc,aAAc,cAKpCC,EAAoB,SAAAC,GACxB,IAAMC,GAAaL,EACnBC,EAAaI,GACbD,EAAYC,IAEd,OACE,kBAAC/B,EAAD,CAAce,OAAQa,EAAMf,SAVR,SAAAjB,GACpB+B,EAAaC,EAAKI,SAAWpC,EAAQoC,QACrCnB,EAASjB,MASN,gBAAGkB,EAAH,EAAGA,UAAWK,EAAd,EAAcA,iBAAd,OACC,yBAAK1B,UAAU,aACb,kBAACL,EAAD,CACEC,MAAM,aACNC,WAAYoC,EACZnC,iBAAkB,kBAAMsC,EAAkBf,IAC1CtB,WAAW,uBAEb,6BACC2B,IACD,6BACA,6BACE,4BACEc,aAAW,gBACXnC,QAAS,kBAAM+B,EAAkBf,IACjCf,cAAY,oBAEX2B,EAAY,cAAgB,kB,MClE5BQ,MAXf,WACE,OACE,yBAAKzC,UAAU,OACb,4BAAQA,UAAU,cAChB,6CACA,kBAAC6B,EAAD,SCGYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.3dffdee8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst noop = () => {};\r\n\r\nexport default function Checkbox({\r\n  label,\r\n  isSelected,\r\n  onCheckboxChange,\r\n  dataTestId = \"toggle-input\"\r\n}) {\r\n  return (\r\n    <div className=\"\">\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name={label}\r\n          checked={isSelected}\r\n          onChange={onCheckboxChange}\r\n          onClick={noop}\r\n          className=\"toggle-input\"\r\n          data-testid={dataTestId}\r\n        />\r\n        {label}\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Checkbox from \"./checkbox\";\r\n\r\nfunction CheckBoxList(props) {\r\n  //console.log(props);\r\n  const [checked, setChecked] = React.useState([]);\r\n\r\n  const toggle = event => {\r\n    const { name } = event.target;\r\n    const currentIndex = checked.indexOf(name);\r\n    const newChecked = [...checked];\r\n    if (currentIndex === -1) {\r\n      newChecked.push(name);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n    setChecked(newChecked);\r\n    props.onToggle(newChecked);\r\n    //console.log(newChecked);\r\n  };\r\n\r\n  const toggleAll = isSelected => {\r\n    const newChecked = isSelected ? [...props.source] : [];\r\n    //console.log(\"BEFORE::\", isSelected, checked, newChecked);\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  const createCheckbox = option => (\r\n    <Checkbox\r\n      label={option}\r\n      isSelected={checked.indexOf(option) !== -1}\r\n      onCheckboxChange={toggle}\r\n      key={option}\r\n    />\r\n  );\r\n\r\n  const createCheckboxes = () => props.source.map(createCheckbox);\r\n\r\n  const getStateAndHelpers = () => {\r\n    //console.log(\"getStateAndHelpers\");\r\n    return {\r\n      checked,\r\n      toggleAll,\r\n      createCheckboxes\r\n    };\r\n  };\r\n\r\n  return props.children(getStateAndHelpers());\r\n}\r\n\r\nfunction Usage({ onToggle = (...args) => console.log(\"onToggle\", ...args) }) {\r\n  const [selectAll, setSelectAll] = React.useState(false);\r\n  const data = [\"Checkbox 1\", \"Checkbox 2\", \"Checkbox 3\"];\r\n  const onCheckToggle = checked => {\r\n    setSelectAll(data.length === checked.length);\r\n    onToggle(checked);\r\n  };\r\n  const onSelectAllToggle = toggleAllFn => {\r\n    const isChecked = !selectAll;\r\n    setSelectAll(isChecked);\r\n    toggleAllFn(isChecked);\r\n  };\r\n  return (\r\n    <CheckBoxList source={data} onToggle={onCheckToggle}>\r\n      {({ toggleAll, createCheckboxes }) => (\r\n        <div className=\"container\">\r\n          <Checkbox\r\n            label=\"Select All\"\r\n            isSelected={selectAll}\r\n            onCheckboxChange={() => onSelectAllToggle(toggleAll)}\r\n            dataTestId=\"checkbox-selectAll\"\r\n          />\r\n          <hr />\r\n          {createCheckboxes()}\r\n          <hr />\r\n          <div>\r\n            <button\r\n              aria-label=\"custom-button\"\r\n              onClick={() => onSelectAllToggle(toggleAll)}\r\n              data-testid=\"button-selectAll\"\r\n            >\r\n              {selectAll ? \"Uncheck All\" : \"Check All\"}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </CheckBoxList>\r\n  );\r\n}\r\n\r\nexport { CheckBoxList, Usage as default };\r\n","import React from \"react\";\nimport Usage from \"./components/checkboxlist\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Checkbox List</h1>\n        <Usage />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}